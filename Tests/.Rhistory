{
guess <- readinteger()
if (guess == num)
{
cat("Congratulations,", num, "is right.\n")
}
else if (guess < num)
{
cat("It's bigger!\n")
}
else if(guess > num)
{
cat("It's smaller!\n")
}
}
source('~/.active-rstudio-document')
{
cat("Congratulations,", num, "is right.\n")
}
20
12
#utility functions
readinteger <- function()
{
n <- readline(prompt="Enter an integer: ")
if(!grepl("^[0-9]+$",n))
{
return(readinteger())
}
return(as.integer(n))
}
# real program start here
num <- round(runif(1) * 100, digits = 0)
guess <- -1
cat("Guess a number between 0 and 100.\n")
while(guess != num)
{
guess <- readinteger()
if (guess == num)
{
cat("Congratulations,", num, "is right.\n")
}
else if (guess < num)
{
cat("It's bigger!\n")
}
else if(guess > num)
{
cat("It's smaller!\n")
}
}
View(readinteger)
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
dataCSV = read.csv("D:/tmp/DataDevice.csv")
print(dataCSV)
str(dataCSV)
library(ggplot2)
ggplot(data = dataCSV, aes(x = sdk, y = manufacturer)) + geom_point()
str(dataCSV)
t <- table(dataCSV$manufacturer)
barplot(t)
hist(t)
barplot(t)
hist(t)
barplot(t)
barplot(t, xlab="Manufacturers", ylab="NumDevices", border="blue")
dataJSON = fromJSON(file = "D:/tmp/device295.json")
library(rjson)
dataJSON = fromJSON(file = "D:/tmp/device295.json")
str(dataJSON)
t <- table(dataJSON$dspId)
hist(t)
print(t)
print(dataJSON[0])
print(dataJSON)
print(dataJSON[0])
print(dataJSON[0][0])
print(dataJSON[0][0][0])
print(dataJSON(0))
print(dataJSON[1])
print(dataJSON[2])
print(dataJSON[10])
print(dataJSON$sensor$providerStatus)
print(dataJSON$sensor)
print(dataJSON[1]$sensor)
print(dataJSON[$sensor])
print(dataJSON[sensor])
print(dataJSON[])
t <- table(dataJSON[[0]])
print(dataJSON[[0]])
print(dataJSON[[1]])
print(dataJSON[[1]$dspId])
print(dataJSON[[1][dspId])
print(dataJSON[[1[1]]])
print(dataJSON[[[1]]])
print(dataJSON[[1]])
print(dataJSON[[4567]])
dim(dataJSON)
dim(dataCSV)
dataFrameJSON <- as.data.frame(dataJSON)
dataJSON = fromJSON(file = "D:/tmp/deviceG.json")
dataFrameJSON <- as.data.frame(dataJSON)
str(dataJSON)
str(dataFrameJSON)
dataFrameJSON <- NULL
str(dataJSON)
str(dataFrameJSON)
dim(dataJSON)
print(dataJSON)
print(dataJSON[[4567]])
print(dataJSON[[500]])
print(dataJSON[[500]]$dspId)
print(dataJSON[[]]$dspId)
print(dataJSON[[300]]$dspId)
print(dataCSV$manufacturer)
print(dataJSON[[300]]$dspId)
t <- table(dataJSON[0])
print(t)
t <- table(dataCSV$manufacturer)
barplot(t, xlab="Manufacturers", ylab="NumDevices", border="blue")
hist(t)
help(hist)
hist(t, right = FALSE)
hist(t, right = TRUE)
help(hist)
hist(t, breaks = 5)
print(t)
hist(dataCSV)
hist(dataCSV$manufacturer)
print(dataCSV$manufacturer)
barplot(t, xlab="Manufacturers", ylab="NumDevices", border="blue")
t1 <- table(dataCSV$numpoints)
print(t1)
barplot(t1, xlab="Manufacturers", ylab="NumDevices", border="blue")
barplot(dataCSV$numpoints, xlab="Manufacturers", ylab="NumDevices", border="blue")
t1<-null
t1<-NULL
delete.response(t1)
dataFrameJSON <- as.data.frame(dataJSON)
dataFrameJSON <- NULL
print(dataJSON[[300]]$sensor)
install.packages("rattle")
str(dataCSV)
help(filter)
help(filter())
help(filter())
help(filter)
help(droplevels)
help(geom_bar)
help(factor)
require(ggplot2)
require(RCurl)
install.packages("RCurl")
require(RCurl)
require(RCurl)
#gsqAPI is a helper function that loads data in from a shared as public Google Spreadsheet.
gsqAPI = function(key,query,gid=0){ return( read.csv( paste( sep="",'http://spreadsheets.google.com/tq?', 'tqx=out:csv','&tq=', curlEscape(query), '&key=', key, '&gid=', gid) ) ) }
View(gsqAPI)
#Provide the spreadsheet key
#Data was originally grabbed from the McLaren F1 Live Dashboard during the race and is Copyright (ï¿½) McLaren Marketing Ltd 2010 (I think? Or possibly Vodafone McLaren Mercedes F1 2010(?)). I believe that speed, throttle and brake data were sponsored by Vodafone.
key='0AmbQbL4Lrd61dER5Qnl3bHo4MkVNRlZ1OVdicnZnTHc'
#We can write SQL like queries over the spreadsheet, as described in https://blog.ouseful.info/2009/05/18/using-google-spreadsheets-as-a-databace-with-the-google-visualisation-api-query-language/
q='select *'
#Run the query on the database
df=gsqAPI(key,q)
View(df)
View(dataCSV)
View(dataJSON)
dataJSON[[568]]
View(dataJSON)
ggplot(df) + geom_point(aes(x=NGPSLongitude,y=NGPSLatitude,col=sign(gLat),size=abs(gLat))) + coord_map(project="mercator")
install.packages("mapproj")
ggplot(df) + geom_point(aes(x=NGPSLongitude,y=NGPSLatitude,col=sign(gLat),size=abs(gLat))) + coord_map(project="mercator")
g=ggplot(df) + geom_point(aes(x=sLap,y=Lap,col=rThrottlePedal,size=-NGear)) + scale_colour_gradient(low='red',high='green')
print(g)
View(gsqAPI)
#Example of gear value around the track
g=ggplot(df) + geom_line(aes(x=sLap,y=NGear))
print(g)
hist(t, breaks = 5)
summary(t)
summary(dataCSV)
aggr(dataCSV)
library(VIM)
install.packages("VIM")
library(VIM)
aggr(dataCSV)
hist(t)
summary(dataJSON)
aggr(dataJSON)
