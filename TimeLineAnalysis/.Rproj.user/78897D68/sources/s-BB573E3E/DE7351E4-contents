library(jsonlite)
library(sqldf)
library(aspace)

############################################################################
#Especifica directorio donde estan los JSON#
directorio = "D:/RSoftware/RProjects/TimeLineAnalysis/data/"
urlRawData = "D:/RSoftware/RProjects/TimeLineAnalysis/rawdata/"

#Nombre del archivo json a deserializar#
archivo = "tld1.json"
dataMaps <- "SmartGPSMaps.RData"

rawMapsFile <- paste(urlRawData,dataMaps,sep = "")
load(file=rawMapsFile)


#######################################################################
#Funcion para cargar directorio con archivo y deserializar#
cargar<-function(directorio,datos){
  enlace <- file.path(directorio, datos)
  dataFile <- fromJSON(enlace)
}
#Guardamos el resultado de la funcion en una variable#
dataFile <- cargar(directorio,archivo)


###############################################################################
#Guardamos las variables de primer nivel del JSON deserializado en variables con similar nombre#
#a como esta en las variables que proporciona el timeline de google#
timestampMs3 <- as.numeric(dataFile$locations$timestampMs)
timestampMs <- as.POSIXct(timestampMs3/1000, origin="1970-01-01") #esta forma solo muestra la fecha con la hora
#as.Date(as.POSIXct(value/1000, origin="1970-01-01")) #esta forma solo muestra la fecha
latitudeE7 <- dataFile$locations$latitudeE7/1e7  #1e7 = 10000000 eje y coordenadas
longitudeE7 <- dataFile$locations$longitudeE7/1e7 #1e7 = 10000000 eje x coordenadas
accuracy <- dataFile$locations$accuracy
#La precisión es la estimación de Google de la precisión de los datos.(metros)
#Una precisión de menos de 800 es alta y más de 5000 es baja.
altitude <- dataFile$locations$altitude
#Esto podría referirse a la altitud del dispositivo. 
#Supongo que se mide desde el nivel del mar
verticalAccuracy <- dataFile$locations$verticalAccuracy
#Esto podría referirse a la precisión de la ubicación vertical del dispositivo. (metros)
velocity <- dataFile$locations$velocity
#Esto podría referirse a la velocidad del dispositivo en el momento de la captura (metros/segundo)
heading <- dataFile$locations$heading
#La dirección en la que viaja el dispositivo.
#https://www.chipoglesby.com/2018/03/2018-analyzing-google-location-historyII/
#https://shiring.github.io/maps/2016/12/30/Standortverlauf_post



v1 = NULL
for (i in 1:length(timestampMs)) {
  if (i <= length(timestampMs)) {
    timestampMs4 <- as.numeric(max(dataFile$locations$activity[[i]]$timestampMs[[1]]))
    timestampMs2 <- as.POSIXct(timestampMs4/1000, origin="1970-01-01") #esta forma solo muestra la fecha con la hora
    v1 = rbind(v1, data.frame(timestampMs2))
    i <- i + 1
    "print(timestampMs2)"
  }
  else{
    break
  }
}

sapply(v1, function(x) sum(is.na(x)))
summarise_all(datos, funs(sum(is.na(.))))

v11 <- subset(v1,!is.na(v1$timestampMs2))

is.null(v1)

length(dataFile$locations$activity[[8]]$activity[[1]]$type)
length(dataFile$locations$activity[[1]]$activity[[1]]$type)

dataFile$locations$activity[[1]]$activity[[1]]$type[[1]]
dataFile$locations$activity[[1]]$activity[[1]]$confidence[[1]]

dataFile$locations$activity[[1]]$activity[[1]]$type[[2]]

is.null(dataFile$locations$activity[[6]]$activity[[1]]$type)

aggr(v1, col = c("yellow", "green", "gray"), only.miss = TRUE, sortVars = TRUE, numbers = TRUE)



v2 = NULL
for (i in 1:length(timestampMs)) {
  if (i <= length(timestampMs)) {
    if (is.null(dataFile$locations$activity[[i]]$activity[[1]]$type)) {
      type <- NA
      confidence <- NA
      v2 = rbind(v2, data.frame(type, confidence))
      i <- i + 1
    } else{
      type <- dataFile$locations$activity[[i]]$activity[[1]]$type[[1]]
      confidence <- dataFile$locations$activity[[i]]$activity[[1]]$confidence[[1]]
      v2 = rbind(v2, data.frame(type, confidence))
      i <- i + 1
    }
  }  else{
    break
  }
}


parte1 <-
  data.frame(
    timestampMs,
    latitudeE7,
    longitudeE7,
    accuracy,
    altitude,
    verticalAccuracy,
    velocity,
    heading
  )

parte2 <- data.frame(v1, v2)

TotalFrame <- data.frame(parte1,parte2)

is.na(TotalFrame)

aggr(TotalFrame, col = c("yellow", "green", "gray"), only.miss = TRUE, sortVars = TRUE, numbers = TRUE)

TotalFrame1 <- subset(TotalFrame,!is.na(TotalFrame$velocity))

aggr(TotalFrame1, col = c("yellow", "green", "gray"), only.miss = TRUE, sortVars = TRUE, numbers = TRUE)

TotalFrame2 <- subset(TotalFrame1,!is.na(TotalFrame1$confidence))

aggr(TotalFrame2, col = c("yellow", "green", "gray"), only.miss = TRUE, sortVars = TRUE, numbers = TRUE)


str(TotalFrame)

coordenadas <- data.frame(latitudeE7, longitudeE7)

str(coordenadas)

mean(coordenadas$latitudeE7)
median(coordenadas$latitudeE7)


aspace


calc_sde(id=1, filename="SDE_Output.txt", centre.xy=NULL, calccentre=TRUE, 
         weighted=FALSE, weights=NULL, points=coordenadas, verbose=FALSE)


ggmap(roadMapQuito)

plot_sde(plotnew=TRUE, plotSDEaxes=TRUE, plotweightedpts=FALSE, 
         plotpoints=TRUE, plotcentre=TRUE, titletxt="plot_sde", 
         xaxis="....", yaxis="....")

data(r.SDD)
str(r.SDD)

plot_sdd(plotnew=TRUE, plothv=FALSE, plotweightedpts=FALSE, 
         plotpoints=TRUE, plotcentre=TRUE, titletxt="plot_sdd", 
         xaxis="....", yaxis="....")




ggmap(roadMapQuito)
ggmap(mapQuito)
ggmap(satelliteMapQuito)

ggmap(roadMapQuito) + 
  geom_point(data = coordenadas,
             aes(x = longitudeE7[], y = latitudeE7[]), 
             alpha = .5, 
             color="darkred", 
             size = .0001) +
  ggtitle("GPS Point Track") + 
  xlab("Longitude") +
  ylab("Latitude")

dataSDE = data.frame(r.SDE$coordsSDE[,1], r.SDE$coordsSDE[,2])
names(dataSDE) = c("Lat","Long")

ggmap(roadMapQuito) + 
  geom_point(data = dataSDE,
             aes(x = Long[], y = Lat[]), 
             alpha = .5, 
             color="darkred", 
             size = .1) +
  ggtitle("GPS Point Track") + 
  xlab("Longitude") +
  ylab("Latitude")









names(dataFile)
names(dataFile$locations)
names(dataFile$locations$activity[[1]])
ss <- list(activity[[1]]$timestampMs, activity[[1]]$activity)
names(ss)

activity <- dataFile$locations$activity

actFrame <- NULL
for(i in 1:length(activity)){
  tmp <- activity[[i]]$timestampMs
  actFrame <- rbind(actFrame, data.frame(tmp))
}



timestampMs <- as.POSIXct(timestampMs3/1000, origin="1970-01-01") #esta forma solo muestra la fecha con la hora




aa <- dataFile$locations$activity[[4]]$timestampMs[[1]]

act <- dataFile$locations$activity
act

act[[1]]$timestampMs
act[[1]]$activity

act[[2]]$timestampMs
act[[2]]$activity

act[[3]]$timestampMs
act[[3]]$activity

act[[22]]$timestampMs
act[[22]]$activity

act[[1234]]$timestampMs
act[[1234]]$activity

data <- sqldf("select * from act")

a<- 0 

for(i in 1:5){
  a <- i + a
}


for(i in 1:20){
  qq <- data.frame(act[[i]])
}

for (i in 1:length(timestampMs)) {
  if (i <= length(timestampMs)) {
    timestampMs4 <- as.numeric(max(dataFile$locations$activity[[i]]$timestampMs[[1]]))
    timestampMs2 <- as.POSIXct(timestampMs4/1000, origin="1970-01-01") #esta forma solo muestra la fecha con la hora
      v1 = rbind(v1, data.frame(timestampMs2))
      i <- i + 1
    "print(timestampMs2)"
  }
  else{
    break
  }
  
}



"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
#Bucle para guardar variables del JSON a partir del segundo nivel de vector V1 es el tiempo en que 
#se cogio la actividad 
v1 = NULL
#for (i in 1:length(timestampMs)) {
  #if (i <= length(timestampMs)) {
  #  timestampMs4 <- as.numeric(max(dataFile$locations$activity[[i]]$timestampMs[[1]]))
  #  timestampMs2 <- as.POSIXct(timestampMs4/1000, origin="1970-01-01") #esta forma solo muestra la fecha con la hora
  #    v1 = rbind(v1, data.frame(timestampMs2))
  #    i <- i + 1
  #  "print(timestampMs2)"
  #}
  #else{
  #  break
  #}

aa<-NULL
for (i in 1:10) {
  asa <- data.frame(dataFile$locations$activity[[i]])
  ##print(dataFile$locations$activity[[i]])
}

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
#Bucle para guardar variables del JSON a partir del segundo nivel de vector V2 y V3 que son los
#activides y su confiabilidad respectivamente
v2 = NULL
j = 1 #contador para ubicar la posicion de UNKNOWN
for (i in 1:length(timestampMs)) {
  if (i <= length(timestampMs)) {
    if (is.null(dataFile$locations$activity[[i]]$activity[[1]]$type)) {
      type <- max(dataFile$locations$activity[[i]]$type[[1]])
      confidence <-
        max(dataFile$locations$activity[[i]]$confidence[[1]])
      if (type == "-Inf") {
        type = NA
        confidence = NA
        v2 = rbind(v2, data.frame(type, confidence))
        i <- i + 1
      } else{
        if (type == "UNKNOWN") {
          while (type == "UNKNOWN") {
            j <- j + 1
            type <- max(dataFile$locations$activity[[i]]$type[[j]])
            confidence <-
              max(dataFile$locations$activity[[i]]$confidence[[j]])
            v2 = rbind(v2, data.frame(type, confidence))
            i <- i + 1
          }
          j = 1
        } else{
          v2 = rbind(v2, data.frame(type, confidence))
          i <- i + 1
        }
      }
    } else{
      type <-
        max(dataFile$locations$activity[[i]]$activity[[1]]$type[[1]])
      confidence <-
        max(dataFile$locations$activity[[i]]$activity[[1]]$confidence[[1]])
      if (type == "-Inf") {
        type = NA
        confidence = NA
        v2 = rbind(v2, data.frame(type, confidence))
        i <- i + 1
      } else{
        if (type == "UNKNOWN") {
          while (type == "UNKNOWN") {
            j <- j + 1
            type <-
              max(dataFile$locations$activity[[i]]$activity[[1]]$type[[j]])
            confidence <-
              max(dataFile$locations$activity[[i]]$activity[[1]]$confidence[[j]])
            v2 = rbind(v2, data.frame(type, confidence))
            i <- i + 1
          }
          j = 1
        } else{
          v2 = rbind(v2, data.frame(type, confidence))
          i <- i + 1
        }
      }
    }
    "print(type)"
  } else{
    break
  }
}


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
#Parte 1 y Parte 2 son dataframes de las variables antes mencionadas
parte1 <-
  data.frame(
    timestampMs,
    latitudeE7,
    longitudeE7,
    accuracy,
    altitude,
    verticalAccuracy,
    velocity,
    heading
  )

parte2 <- data.frame(v1, v2)


##################################################################################################
#Funcion para crear una tabla general a partir de los dataframes anteriores#
#y luego de crearlo adjunta nuevos datos de distintos archivos en la misma tabla creada #
Proceso <- function(variables1,variables2){
  if(!exists("TablaFinal")){
    TablaFinal<- data.frame(variables1,variables2)
  }else{
    lista<- data.frame(variables1,variables2)
    TablaFinal <- rbind(TablaFinal,lista)
  }
}

#Invocamos y guardamos el resultado de la funcion en una variable#
TablaFinal <-Proceso(parte1,parte2)


"options(max.print=100)"
###############################################################################



